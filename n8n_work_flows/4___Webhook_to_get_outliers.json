{
  "name": "3___Webhook_to_get_outliers",
  "nodes": [
    {
      "parameters": {
        "content": "# Send a GET request this webhook:\nYou must send a GET request to this endpoint to get the outliers analysis.\n\n1. Turn this workflow active\n2. Make this GET api call [(available in Postman)](https://.postman.co/workspace/My-Workspace~7f422de4-6c94-4f6c-8995-58975a0e0a16/request/45052632-7447d3ff-7151-4bb5-9ad1-4437683d3603?action=share&creator=45052632&ctx=documentation)\n\n```\ncurl --location 'http://localhost:5678/webhook/get_outliers'\n```\n",
        "height": 440,
        "width": 600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -760,
        -1160
      ],
      "typeVersion": 1,
      "id": "7a6013b5-1d61-477e-90f9-2de77bdb1904",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "path": "get_outliers",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -540,
        -880
      ],
      "id": "e1505a37-9f2a-418b-b402-42660413689e",
      "name": "Webhook",
      "webhookId": "68910b86-8889-49a9-87f7-47eea504a1e5"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        2500,
        -880
      ],
      "id": "54ab0ad6-f5f4-4f56-8816-176834d33d21",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "content": "# Query data\nThe **explanation of the query** is commented inside the postgres node",
        "height": 340,
        "width": 320
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        440,
        -1060
      ],
      "typeVersion": 1,
      "id": "9678e432-244f-40a9-a000-bd65cf1d42c9",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "# Constructs return payload\nReturn to the user the response for the webhook",
        "height": 360,
        "width": 820,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1880,
        -1080
      ],
      "typeVersion": 1,
      "id": "293771ba-6858-43d9-a37d-8cd704a7fe24",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bd3264a6-bbbd-43bb-8525-359ec2bdd2f7",
              "name": "info",
              "value": "Congratulations! You made the GET request and got the Energy consumption outliers and report",
              "type": "string"
            },
            {
              "id": "9dd3ba69-538a-4452-9e95-d725096ed1f8",
              "name": "ai_analysis",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "ea1ee648-694b-48fe-a52b-774c890a1856",
              "name": "data",
              "value": "={{ $('Aggregate').item.json.data_with_outliers }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2280,
        -880
      ],
      "id": "48ee5662-807d-4741-863d-225103187c21",
      "name": "body of respose"
    },
    {
      "parameters": {
        "content": "## Active clients\nSince we have this\n```\nid,client_id,is_active,created_at\n1,1,false,2025-01-10 00:00:00            -- Acre (inactive contract started in January)\n2,2,false,2025-01-10 00:00:00            -- Tocantins (old contract, now inactive)\n3,2,true,2025-05-10 00:00:00             -- Tocantins (current active contract)\n\n/* Pernambuco – ten contracts, only the last one active */\n/* One active January contract for each remaining state */\n```\nWe must not see \"Acre\" in this respose",
        "height": 500,
        "width": 880,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        460,
        -420
      ],
      "typeVersion": 1,
      "id": "a83250cd-661d-4850-8cd9-9a6cc32b2732",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH\n    active_clients AS (                -- all clients that still have ≥1 active contract\n        SELECT DISTINCT c.id, c.name\n        FROM clients c\n        JOIN contracts ct ON ct.client_id = c.id\n        WHERE ct.is_active = TRUE\n    )\nSELECT * from active_clients",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        600,
        -100
      ],
      "id": "90ad81d3-be56-4e1e-ab38-6f92c9b3290c",
      "name": "Active clients",
      "credentials": {
        "postgres": {
          "id": "lib3KQQokucMgRMe",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "808e1a52-770e-42c7-9c2d-c379700233ea",
              "leftValue": "={{ $json.name }}",
              "rightValue": "Acre",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        820,
        -100
      ],
      "id": "485d3fa6-5792-4c9d-a5b3-a2f2ea547b19",
      "name": "If"
    },
    {
      "parameters": {
        "errorMessage": "There is \"Acre in the answer\". Check the active_clients"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        1080,
        -100
      ],
      "id": "d8c7173c-7f39-4513-a8ca-b74a24524cf4",
      "name": "Error"
    },
    {
      "parameters": {
        "content": "## Energy readings that need to be considered\nThere must be 3 Tocantins readings, 5 from Pernambuco and 3 readings from all other clients (states)\n\n",
        "height": 360,
        "width": 560,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        460,
        100
      ],
      "typeVersion": 1,
      "id": "16e23992-2fbd-4c88-8a12-197af1287d9f",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c87c7db7-cfc3-4533-971d-9ca75cabfaaa",
              "name": "timestamp_now",
              "value": "2025-06-14T23:00:33.412Z",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        80,
        -880
      ],
      "id": "64a9bf32-3ae0-4138-94f5-708b2b7618c0",
      "name": "get timestamptz"
    },
    {
      "parameters": {
        "content": "# Get current time\nHere is set a mocked \"timestamp_now\".\nIn a real production worflow you would actually get the current_timestamp from a JS function in the edit fields node",
        "height": 340,
        "width": 320
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -20,
        -1060
      ],
      "typeVersion": 1,
      "id": "ee02134f-02b0-43c1-9cf0-f99794a6ccb6",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH\n    active_clients AS (                -- all clients that still have ≥1 active contract\n        SELECT DISTINCT c.id, c.name\n        FROM clients c\n        JOIN contracts ct ON ct.client_id = c.id\n        WHERE ct.is_active = TRUE\n    ),\n\n    recent_readings AS (               -- all readings in the last 3 months for those clients\n        SELECT\n            ac.id         AS client_id,\n            ac.name       AS client_name,\n            er.reading_amount_kwh,\n            er.created_at AS reading_date\n        FROM active_clients ac\n        JOIN contracts       ct ON ct.client_id = ac.id\n        JOIN energy_readings er ON er.contract_id = ct.id\n        WHERE er.created_at >= '{{ $json.timestamp_now }}'::timestamptz - INTERVAL '3 months'\n    )\n\nSELECT * from recent_readings",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        600,
        240
      ],
      "id": "79d0a0a9-aea5-4f5f-bf1e-f20899f5be06",
      "name": "all readings regarded",
      "credentials": {
        "postgres": {
          "id": "lib3KQQokucMgRMe",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "/* -------------------------------------------------------------------------\n   Average-consumption dashboard\n   • Step 1 – active_clients :   all clients that still hold at least one\n                                 active contract.\n   • Step 2 – recent_readings :  every meter reading from those clients\n                                 taken in the last 3 full months, plus a\n                                 “month” column truncated to the first day\n                                 of the month.\n   • Step 3 – monthly_sum     :  total kWh per client per month (so each\n                                 month counts only once, no matter how many\n                                 readings it contains).\n   • Final  – average of the three monthly totals, giving one figure per\n                                 client that weighs each month equally.\n-----------------------------------------------------------------------------*/\n\nWITH active_clients AS (          --  clients with ≥ 1 active contract\n    SELECT DISTINCT c.id, c.name\n    FROM clients c\n    JOIN contracts ct ON ct.client_id = c.id\n    WHERE ct.is_active = TRUE\n),\n\nrecent_readings AS (              --  readings in the last 3 months\n    SELECT\n        ac.id   AS client_id,\n        ac.name AS client_name,\n        DATE_TRUNC('month', er.created_at) AS month,   -- first day of month\n        er.reading_amount_kwh\n    FROM active_clients ac\n    JOIN contracts       ct ON ct.client_id = ac.id\n    JOIN energy_readings er ON er.contract_id = ct.id\n    WHERE er.created_at >= '{{ $json.timestamp_now }}'::timestamptz\n                               - INTERVAL '3 months'\n),\n\nmonthly_sum AS (                  --  total kWh per client per month\n    SELECT\n        client_id,\n        client_name,\n        month,\n        SUM(reading_amount_kwh) AS kwh_per_month\n    FROM recent_readings\n    GROUP BY client_id, client_name, month\n)\n\nSELECT                            -- average of the three monthly totals\n    client_id,\n    client_name,\n    ROUND(AVG(kwh_per_month)::numeric, 2) AS avg_kwh_last_3m\nFROM monthly_sum\nGROUP BY client_id, client_name\nORDER BY client_name;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        540,
        -880
      ],
      "id": "256759b3-01a7-44d1-a702-19c10df3d257",
      "name": "insert clients1",
      "credentials": {
        "postgres": {
          "id": "lib3KQQokucMgRMe",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1040,
        -880
      ],
      "id": "afa0ff12-dd35-4dd0-b500-ab3b8503deb8",
      "name": "Input for outlier detection"
    },
    {
      "parameters": {
        "content": "# Outlier detection\nHere it is used the **modified z-score (median ± MAD)** for outlier detection.\n\n*We enjoy that n8n has already pandas and other libraries in the n8n code node!*\n\n## Simple explanation to easily understand:\n- We have ten jars of cookies. To see which jar is way bigger or way smaller than the others, we first find the jar that sits in the middle when we line them up (that’s the median).\n- Then we measure how far every jar is from that middle jar. We shrink that distance with a magic number 0.6745 so it matches the way grown-ups usually talk about “far”.\n- Finally, if a jar is more than 3 ½ of those shrunken steps away, we shout “That jar is odd!”\nIn our list, only the São Paulo jar is odd—much bigger than everyone else—so it gets the outlier sticker.\n\n## Technical explanation\n```\nmed = df['avg'].median()                        # robust centre\nmad = np.median(np.abs(df['avg'] - med))        # robust spread\ndf['mod_z'] = 0.6745 * (df['avg'] - med) / mad  # scale MAD → σ (0.6745 = Φ⁻¹(0.75))\ndf['is_outlier'] = df['mod_z'].abs() > 3.5      # Iglewicz-Hoaglin threshold\n```\n- 0.6745 rescales MAD (Median Absolute Deviation) so that, for normally-distributed data, mod_z ≈ classic z-score.\n- |mod_z| > 3.5 is the widely accepted cutoff: observations beyond ±3.5 scaled MAD are flagged as outliers.\n- Output: a list of dicts containing the original fields plus mod_z and is_outlier; São Paulo is the sole high outlier.",
        "height": 760,
        "width": 940
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        860,
        -1480
      ],
      "typeVersion": 1,
      "id": "62cb2464-8951-4bd8-9d9e-5d93c0211325",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "# Data integrity tests\n",
        "height": 100,
        "width": 420,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        460,
        -540
      ],
      "typeVersion": 1,
      "id": "6e2feab9-e287-41a3-9b2a-b15615e593bf",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import pandas as pd\nimport numpy as np\n\n# ------------------------------------------------------------------\n# 1) Get payload from the first inbound item\n# ------------------------------------------------------------------\ndata = _input.first().json.data        # list[dict]\n\n# ------------------------------------------------------------------\n# 2) Build DataFrame and compute the modified-z score\n# ------------------------------------------------------------------\ndf = pd.DataFrame(data)\ndf['avg'] = pd.to_numeric(df['avg_kwh_last_3m'])\n\nmed = df['avg'].median()\nmad = np.median(np.abs(df['avg'] - med))\ndf['mod_z'] = 0.6745 * (df['avg'] - med) / mad\ndf['is_outlier'] = df['mod_z'].abs() > 3.5   # |Mz| > 3.5 ⇒ outlier\n\n# ------------------------------------------------------------------\n# 3) Convert back to plain Python objects\n# ------------------------------------------------------------------\nresult_rows = df.to_dict(orient='records')    # list[dict]\n\n# n8n expects a list of items → each item is {\"json\": {...}}\nreturn [{'json': row} for row in result_rows]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        -880
      ],
      "id": "7822b08d-39b9-45dd-9d2f-8c376f08a988",
      "name": "Outlier - modified z-score"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "data_with_outliers",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1500,
        -880
      ],
      "id": "40d4fb85-c539-4504-a17f-eaac88f88066",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data_with_outliers.toJsonString() }}",
        "messages": {
          "messageValues": [
            {
              "message": "=# Role\nYou are a data analyst and your job is to summarize and get insights from the data given to you\n\n# Scope\nYou work with kWh readings from diferent \"clients\", they are the states of Brazil. Each client is an item in the list given to you.\nEach client has a name \"client_name\", an average of their last 3 months energy used \"avg_kwg_last_3m\" and a warning if they are an outlier.\nAn outlier is a client who has a energy usage that significantly differs from other clients.\n\n# Comand\n1. Understand the data given to you and find the outliers\n2. Craft a small report about this data to be given to **business stakeholders** like a CEO that own the energy company.\n3. Be concise and insigthful, start with a clear overview and end with a call to action.\n4. Your answer must take only 10 seconds to read"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1920,
        -880
      ],
      "id": "c4815033-7bad-48c5-acdd-179616f090f0",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1980,
        -700
      ],
      "id": "98d8c5a5-e885-4a90-80f2-27e4f7b9df02",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "tx2nqSrq9dZKZj7w",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "get timestamptz",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "body of respose": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Active clients": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get timestamptz": {
      "main": [
        [
          {
            "node": "all readings regarded",
            "type": "main",
            "index": 0
          },
          {
            "node": "Active clients",
            "type": "main",
            "index": 0
          },
          {
            "node": "insert clients1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "insert clients1": {
      "main": [
        [
          {
            "node": "Input for outlier detection",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input for outlier detection": {
      "main": [
        [
          {
            "node": "Outlier - modified z-score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Outlier - modified z-score": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "body of respose",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "990ac530-d880-427f-b964-a4c093b2e2bb",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "caab66e1a9e45e87f9a2b25d354c453ee8ec993a7591d8d6a3a18f1e8de7c6e2"
  },
  "id": "bX3Nhi3XJWGjNufe",
  "tags": []
}